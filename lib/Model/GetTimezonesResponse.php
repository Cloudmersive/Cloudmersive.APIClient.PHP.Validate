<?php
/**
 * GetTimezonesResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetTimezonesResponse Class Doc Comment
 *
 * @category Class
 * @description Result of performing a get time zones operation
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetTimezonesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetTimezonesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'successful' => 'bool',
        'country_full_name' => 'string',
        'iso_two_letter_code' => 'string',
        'fips_two_letter_code' => 'string',
        'three_letter_code' => 'string',
        'timezones' => '\Swagger\Client\Model\Timezone[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'successful' => null,
        'country_full_name' => null,
        'iso_two_letter_code' => null,
        'fips_two_letter_code' => null,
        'three_letter_code' => null,
        'timezones' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'successful' => 'Successful',
        'country_full_name' => 'CountryFullName',
        'iso_two_letter_code' => 'ISOTwoLetterCode',
        'fips_two_letter_code' => 'FIPSTwoLetterCode',
        'three_letter_code' => 'ThreeLetterCode',
        'timezones' => 'Timezones'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'successful' => 'setSuccessful',
        'country_full_name' => 'setCountryFullName',
        'iso_two_letter_code' => 'setIsoTwoLetterCode',
        'fips_two_letter_code' => 'setFipsTwoLetterCode',
        'three_letter_code' => 'setThreeLetterCode',
        'timezones' => 'setTimezones'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'successful' => 'getSuccessful',
        'country_full_name' => 'getCountryFullName',
        'iso_two_letter_code' => 'getIsoTwoLetterCode',
        'fips_two_letter_code' => 'getFipsTwoLetterCode',
        'three_letter_code' => 'getThreeLetterCode',
        'timezones' => 'getTimezones'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['successful'] = isset($data['successful']) ? $data['successful'] : null;
        $this->container['country_full_name'] = isset($data['country_full_name']) ? $data['country_full_name'] : null;
        $this->container['iso_two_letter_code'] = isset($data['iso_two_letter_code']) ? $data['iso_two_letter_code'] : null;
        $this->container['fips_two_letter_code'] = isset($data['fips_two_letter_code']) ? $data['fips_two_letter_code'] : null;
        $this->container['three_letter_code'] = isset($data['three_letter_code']) ? $data['three_letter_code'] : null;
        $this->container['timezones'] = isset($data['timezones']) ? $data['timezones'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets successful
     *
     * @return bool
     */
    public function getSuccessful()
    {
        return $this->container['successful'];
    }

    /**
     * Sets successful
     *
     * @param bool $successful True if successful, false otherwise
     *
     * @return $this
     */
    public function setSuccessful($successful)
    {
        $this->container['successful'] = $successful;

        return $this;
    }

    /**
     * Gets country_full_name
     *
     * @return string
     */
    public function getCountryFullName()
    {
        return $this->container['country_full_name'];
    }

    /**
     * Sets country_full_name
     *
     * @param string $country_full_name Full name of the country
     *
     * @return $this
     */
    public function setCountryFullName($country_full_name)
    {
        $this->container['country_full_name'] = $country_full_name;

        return $this;
    }

    /**
     * Gets iso_two_letter_code
     *
     * @return string
     */
    public function getIsoTwoLetterCode()
    {
        return $this->container['iso_two_letter_code'];
    }

    /**
     * Sets iso_two_letter_code
     *
     * @param string $iso_two_letter_code Two-letter ISO 3166-1 country code
     *
     * @return $this
     */
    public function setIsoTwoLetterCode($iso_two_letter_code)
    {
        $this->container['iso_two_letter_code'] = $iso_two_letter_code;

        return $this;
    }

    /**
     * Gets fips_two_letter_code
     *
     * @return string
     */
    public function getFipsTwoLetterCode()
    {
        return $this->container['fips_two_letter_code'];
    }

    /**
     * Sets fips_two_letter_code
     *
     * @param string $fips_two_letter_code Two-letter FIPS 10-4 country code
     *
     * @return $this
     */
    public function setFipsTwoLetterCode($fips_two_letter_code)
    {
        $this->container['fips_two_letter_code'] = $fips_two_letter_code;

        return $this;
    }

    /**
     * Gets three_letter_code
     *
     * @return string
     */
    public function getThreeLetterCode()
    {
        return $this->container['three_letter_code'];
    }

    /**
     * Sets three_letter_code
     *
     * @param string $three_letter_code Three-letter ISO 3166-1 country code
     *
     * @return $this
     */
    public function setThreeLetterCode($three_letter_code)
    {
        $this->container['three_letter_code'] = $three_letter_code;

        return $this;
    }

    /**
     * Gets timezones
     *
     * @return \Swagger\Client\Model\Timezone[]
     */
    public function getTimezones()
    {
        return $this->container['timezones'];
    }

    /**
     * Sets timezones
     *
     * @param \Swagger\Client\Model\Timezone[] $timezones Time zones (IANA/Olsen) in the country
     *
     * @return $this
     */
    public function setTimezones($timezones)
    {
        $this->container['timezones'] = $timezones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


