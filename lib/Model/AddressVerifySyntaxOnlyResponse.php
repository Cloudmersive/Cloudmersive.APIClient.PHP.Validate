<?php
/**
 * AddressVerifySyntaxOnlyResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AddressVerifySyntaxOnlyResponse Class Doc Comment
 *
 * @category Class
 * @description Syntactic validity of email address
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddressVerifySyntaxOnlyResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddressVerifySyntaxOnlyResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'valid_address' => 'bool',
        'domain' => 'string',
        'is_free_email_provider' => 'bool',
        'is_disposable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'valid_address' => null,
        'domain' => null,
        'is_free_email_provider' => null,
        'is_disposable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valid_address' => 'ValidAddress',
        'domain' => 'Domain',
        'is_free_email_provider' => 'IsFreeEmailProvider',
        'is_disposable' => 'IsDisposable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valid_address' => 'setValidAddress',
        'domain' => 'setDomain',
        'is_free_email_provider' => 'setIsFreeEmailProvider',
        'is_disposable' => 'setIsDisposable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valid_address' => 'getValidAddress',
        'domain' => 'getDomain',
        'is_free_email_provider' => 'getIsFreeEmailProvider',
        'is_disposable' => 'getIsDisposable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['valid_address'] = isset($data['valid_address']) ? $data['valid_address'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['is_free_email_provider'] = isset($data['is_free_email_provider']) ? $data['is_free_email_provider'] : null;
        $this->container['is_disposable'] = isset($data['is_disposable']) ? $data['is_disposable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets valid_address
     *
     * @return bool
     */
    public function getValidAddress()
    {
        return $this->container['valid_address'];
    }

    /**
     * Sets valid_address
     *
     * @param bool $valid_address True if the email address is syntactically valid, false if it is not
     *
     * @return $this
     */
    public function setValidAddress($valid_address)
    {
        $this->container['valid_address'] = $valid_address;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain Domain name of the email address
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets is_free_email_provider
     *
     * @return bool
     */
    public function getIsFreeEmailProvider()
    {
        return $this->container['is_free_email_provider'];
    }

    /**
     * Sets is_free_email_provider
     *
     * @param bool $is_free_email_provider True if the email domain name is a free provider (typically a free to sign up web email provider for consumers / personal use), false otherwise.
     *
     * @return $this
     */
    public function setIsFreeEmailProvider($is_free_email_provider)
    {
        $this->container['is_free_email_provider'] = $is_free_email_provider;

        return $this;
    }

    /**
     * Gets is_disposable
     *
     * @return bool
     */
    public function getIsDisposable()
    {
        return $this->container['is_disposable'];
    }

    /**
     * Sets is_disposable
     *
     * @param bool $is_disposable True if the email address is a disposable email address, false otherwise; these disposable providers are not typically used to receive email and so will have a low likelihood of opening mail sent there.
     *
     * @return $this
     */
    public function setIsDisposable($is_disposable)
    {
        $this->container['is_disposable'] = $is_disposable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


