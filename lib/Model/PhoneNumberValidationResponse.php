<?php
/**
 * PhoneNumberValidationResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PhoneNumberValidationResponse Class Doc Comment
 *
 * @category Class
 * @description Result from validating a phone number
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhoneNumberValidationResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PhoneNumberValidationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_valid' => 'bool',
        'successful' => 'bool',
        'phone_number_type' => 'string',
        'e164_format' => 'string',
        'international_format' => 'string',
        'national_format' => 'string',
        'country_code' => 'string',
        'country_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_valid' => null,
        'successful' => null,
        'phone_number_type' => null,
        'e164_format' => null,
        'international_format' => null,
        'national_format' => null,
        'country_code' => null,
        'country_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_valid' => 'IsValid',
        'successful' => 'Successful',
        'phone_number_type' => 'PhoneNumberType',
        'e164_format' => 'E164Format',
        'international_format' => 'InternationalFormat',
        'national_format' => 'NationalFormat',
        'country_code' => 'CountryCode',
        'country_name' => 'CountryName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_valid' => 'setIsValid',
        'successful' => 'setSuccessful',
        'phone_number_type' => 'setPhoneNumberType',
        'e164_format' => 'setE164Format',
        'international_format' => 'setInternationalFormat',
        'national_format' => 'setNationalFormat',
        'country_code' => 'setCountryCode',
        'country_name' => 'setCountryName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_valid' => 'getIsValid',
        'successful' => 'getSuccessful',
        'phone_number_type' => 'getPhoneNumberType',
        'e164_format' => 'getE164Format',
        'international_format' => 'getInternationalFormat',
        'national_format' => 'getNationalFormat',
        'country_code' => 'getCountryCode',
        'country_name' => 'getCountryName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_valid'] = isset($data['is_valid']) ? $data['is_valid'] : null;
        $this->container['successful'] = isset($data['successful']) ? $data['successful'] : null;
        $this->container['phone_number_type'] = isset($data['phone_number_type']) ? $data['phone_number_type'] : null;
        $this->container['e164_format'] = isset($data['e164_format']) ? $data['e164_format'] : null;
        $this->container['international_format'] = isset($data['international_format']) ? $data['international_format'] : null;
        $this->container['national_format'] = isset($data['national_format']) ? $data['national_format'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['country_name'] = isset($data['country_name']) ? $data['country_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets is_valid
     *
     * @return bool
     */
    public function getIsValid()
    {
        return $this->container['is_valid'];
    }

    /**
     * Sets is_valid
     *
     * @param bool $is_valid True if the phone number is valid, false otherwise
     *
     * @return $this
     */
    public function setIsValid($is_valid)
    {
        $this->container['is_valid'] = $is_valid;

        return $this;
    }

    /**
     * Gets successful
     *
     * @return bool
     */
    public function getSuccessful()
    {
        return $this->container['successful'];
    }

    /**
     * Sets successful
     *
     * @param bool $successful True if the operation was successful, false if there was an error during validation.  See IsValid for validation result.
     *
     * @return $this
     */
    public function setSuccessful($successful)
    {
        $this->container['successful'] = $successful;

        return $this;
    }

    /**
     * Gets phone_number_type
     *
     * @return string
     */
    public function getPhoneNumberType()
    {
        return $this->container['phone_number_type'];
    }

    /**
     * Sets phone_number_type
     *
     * @param string $phone_number_type Type of phone number; possible values are: FixedLine, Mobile, FixedLineOrMobile, TollFree, PremiumRate,   SharedCost, Voip, PersonalNumber, Pager, Uan, Voicemail, Unknown
     *
     * @return $this
     */
    public function setPhoneNumberType($phone_number_type)
    {
        $this->container['phone_number_type'] = $phone_number_type;

        return $this;
    }

    /**
     * Gets e164_format
     *
     * @return string
     */
    public function getE164Format()
    {
        return $this->container['e164_format'];
    }

    /**
     * Sets e164_format
     *
     * @param string $e164_format E.164 format of the phone number
     *
     * @return $this
     */
    public function setE164Format($e164_format)
    {
        $this->container['e164_format'] = $e164_format;

        return $this;
    }

    /**
     * Gets international_format
     *
     * @return string
     */
    public function getInternationalFormat()
    {
        return $this->container['international_format'];
    }

    /**
     * Sets international_format
     *
     * @param string $international_format Internaltional format of the phone number
     *
     * @return $this
     */
    public function setInternationalFormat($international_format)
    {
        $this->container['international_format'] = $international_format;

        return $this;
    }

    /**
     * Gets national_format
     *
     * @return string
     */
    public function getNationalFormat()
    {
        return $this->container['national_format'];
    }

    /**
     * Sets national_format
     *
     * @param string $national_format National format of the phone number
     *
     * @return $this
     */
    public function setNationalFormat($national_format)
    {
        $this->container['national_format'] = $national_format;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Two digit country code of the phone number
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string $country_name User-friendly long name of the country for the phone number
     *
     * @return $this
     */
    public function setCountryName($country_name)
    {
        $this->container['country_name'] = $country_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


