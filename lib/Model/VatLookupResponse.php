<?php
/**
 * VatLookupResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VatLookupResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VatLookupResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VatLookupResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country_code' => 'string',
        'vat_number' => 'string',
        'is_valid' => 'bool',
        'business_name' => 'string',
        'business_address' => 'string',
        'business_building' => 'string',
        'business_street_number' => 'string',
        'business_street' => 'string',
        'business_city' => 'string',
        'business_state_or_province' => 'string',
        'business_postal_code' => 'string',
        'business_country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country_code' => null,
        'vat_number' => null,
        'is_valid' => null,
        'business_name' => null,
        'business_address' => null,
        'business_building' => null,
        'business_street_number' => null,
        'business_street' => null,
        'business_city' => null,
        'business_state_or_province' => null,
        'business_postal_code' => null,
        'business_country' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country_code' => 'CountryCode',
        'vat_number' => 'VatNumber',
        'is_valid' => 'IsValid',
        'business_name' => 'BusinessName',
        'business_address' => 'BusinessAddress',
        'business_building' => 'BusinessBuilding',
        'business_street_number' => 'BusinessStreetNumber',
        'business_street' => 'BusinessStreet',
        'business_city' => 'BusinessCity',
        'business_state_or_province' => 'BusinessStateOrProvince',
        'business_postal_code' => 'BusinessPostalCode',
        'business_country' => 'BusinessCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country_code' => 'setCountryCode',
        'vat_number' => 'setVatNumber',
        'is_valid' => 'setIsValid',
        'business_name' => 'setBusinessName',
        'business_address' => 'setBusinessAddress',
        'business_building' => 'setBusinessBuilding',
        'business_street_number' => 'setBusinessStreetNumber',
        'business_street' => 'setBusinessStreet',
        'business_city' => 'setBusinessCity',
        'business_state_or_province' => 'setBusinessStateOrProvince',
        'business_postal_code' => 'setBusinessPostalCode',
        'business_country' => 'setBusinessCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country_code' => 'getCountryCode',
        'vat_number' => 'getVatNumber',
        'is_valid' => 'getIsValid',
        'business_name' => 'getBusinessName',
        'business_address' => 'getBusinessAddress',
        'business_building' => 'getBusinessBuilding',
        'business_street_number' => 'getBusinessStreetNumber',
        'business_street' => 'getBusinessStreet',
        'business_city' => 'getBusinessCity',
        'business_state_or_province' => 'getBusinessStateOrProvince',
        'business_postal_code' => 'getBusinessPostalCode',
        'business_country' => 'getBusinessCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['is_valid'] = isset($data['is_valid']) ? $data['is_valid'] : null;
        $this->container['business_name'] = isset($data['business_name']) ? $data['business_name'] : null;
        $this->container['business_address'] = isset($data['business_address']) ? $data['business_address'] : null;
        $this->container['business_building'] = isset($data['business_building']) ? $data['business_building'] : null;
        $this->container['business_street_number'] = isset($data['business_street_number']) ? $data['business_street_number'] : null;
        $this->container['business_street'] = isset($data['business_street']) ? $data['business_street'] : null;
        $this->container['business_city'] = isset($data['business_city']) ? $data['business_city'] : null;
        $this->container['business_state_or_province'] = isset($data['business_state_or_province']) ? $data['business_state_or_province'] : null;
        $this->container['business_postal_code'] = isset($data['business_postal_code']) ? $data['business_postal_code'] : null;
        $this->container['business_country'] = isset($data['business_country']) ? $data['business_country'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Two-letter country code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number VAT number
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets is_valid
     *
     * @return bool
     */
    public function getIsValid()
    {
        return $this->container['is_valid'];
    }

    /**
     * Sets is_valid
     *
     * @param bool $is_valid True if the VAT code is valid, false otherwise
     *
     * @return $this
     */
    public function setIsValid($is_valid)
    {
        $this->container['is_valid'] = $is_valid;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string $business_name Name of the business
     *
     * @return $this
     */
    public function setBusinessName($business_name)
    {
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets business_address
     *
     * @return string
     */
    public function getBusinessAddress()
    {
        return $this->container['business_address'];
    }

    /**
     * Sets business_address
     *
     * @param string $business_address Business address as a single string
     *
     * @return $this
     */
    public function setBusinessAddress($business_address)
    {
        $this->container['business_address'] = $business_address;

        return $this;
    }

    /**
     * Gets business_building
     *
     * @return string
     */
    public function getBusinessBuilding()
    {
        return $this->container['business_building'];
    }

    /**
     * Sets business_building
     *
     * @param string $business_building For the business address, the name of the building, house or structure if applicable, such as \"Cloudmersive Building 2\".  This will often by null.
     *
     * @return $this
     */
    public function setBusinessBuilding($business_building)
    {
        $this->container['business_building'] = $business_building;

        return $this;
    }

    /**
     * Gets business_street_number
     *
     * @return string
     */
    public function getBusinessStreetNumber()
    {
        return $this->container['business_street_number'];
    }

    /**
     * Sets business_street_number
     *
     * @param string $business_street_number For the business address, the street number or house number of the address.  For example, in the address \"1600 Pennsylvania Avenue NW\" the street number would be \"1600\".  This value will typically be populated for most addresses.
     *
     * @return $this
     */
    public function setBusinessStreetNumber($business_street_number)
    {
        $this->container['business_street_number'] = $business_street_number;

        return $this;
    }

    /**
     * Gets business_street
     *
     * @return string
     */
    public function getBusinessStreet()
    {
        return $this->container['business_street'];
    }

    /**
     * Sets business_street
     *
     * @param string $business_street For the business address, the name of the street or road of the address.  For example, in the address \"1600 Pennsylvania Avenue NW\" the street number would be \"Pennsylvania Avenue NW\".
     *
     * @return $this
     */
    public function setBusinessStreet($business_street)
    {
        $this->container['business_street'] = $business_street;

        return $this;
    }

    /**
     * Gets business_city
     *
     * @return string
     */
    public function getBusinessCity()
    {
        return $this->container['business_city'];
    }

    /**
     * Sets business_city
     *
     * @param string $business_city For the business address, the city of the address.
     *
     * @return $this
     */
    public function setBusinessCity($business_city)
    {
        $this->container['business_city'] = $business_city;

        return $this;
    }

    /**
     * Gets business_state_or_province
     *
     * @return string
     */
    public function getBusinessStateOrProvince()
    {
        return $this->container['business_state_or_province'];
    }

    /**
     * Sets business_state_or_province
     *
     * @param string $business_state_or_province For the business address, the state or province of the address.
     *
     * @return $this
     */
    public function setBusinessStateOrProvince($business_state_or_province)
    {
        $this->container['business_state_or_province'] = $business_state_or_province;

        return $this;
    }

    /**
     * Gets business_postal_code
     *
     * @return string
     */
    public function getBusinessPostalCode()
    {
        return $this->container['business_postal_code'];
    }

    /**
     * Sets business_postal_code
     *
     * @param string $business_postal_code For the business address, the postal code or zip code of the address.
     *
     * @return $this
     */
    public function setBusinessPostalCode($business_postal_code)
    {
        $this->container['business_postal_code'] = $business_postal_code;

        return $this;
    }

    /**
     * Gets business_country
     *
     * @return string
     */
    public function getBusinessCountry()
    {
        return $this->container['business_country'];
    }

    /**
     * Sets business_country
     *
     * @param string $business_country For the business address, country of the address, if present in the address.  If not included in the address it will be null.
     *
     * @return $this
     */
    public function setBusinessCountry($business_country)
    {
        $this->container['business_country'] = $business_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


