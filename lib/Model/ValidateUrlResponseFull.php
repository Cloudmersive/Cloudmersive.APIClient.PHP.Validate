<?php
/**
 * ValidateUrlResponseFull
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValidateUrlResponseFull Class Doc Comment
 *
 * @category Class
 * @description Result of validating a URL with full validation
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValidateUrlResponseFull implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ValidateUrlResponseFull';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'valid_url' => 'bool',
        'valid_syntax' => 'bool',
        'valid_domain' => 'bool',
        'valid_endpoint' => 'bool',
        'well_formed_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'valid_url' => null,
        'valid_syntax' => null,
        'valid_domain' => null,
        'valid_endpoint' => null,
        'well_formed_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valid_url' => 'ValidURL',
        'valid_syntax' => 'Valid_Syntax',
        'valid_domain' => 'Valid_Domain',
        'valid_endpoint' => 'Valid_Endpoint',
        'well_formed_url' => 'WellFormedURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valid_url' => 'setValidUrl',
        'valid_syntax' => 'setValidSyntax',
        'valid_domain' => 'setValidDomain',
        'valid_endpoint' => 'setValidEndpoint',
        'well_formed_url' => 'setWellFormedUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valid_url' => 'getValidUrl',
        'valid_syntax' => 'getValidSyntax',
        'valid_domain' => 'getValidDomain',
        'valid_endpoint' => 'getValidEndpoint',
        'well_formed_url' => 'getWellFormedUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['valid_url'] = isset($data['valid_url']) ? $data['valid_url'] : null;
        $this->container['valid_syntax'] = isset($data['valid_syntax']) ? $data['valid_syntax'] : null;
        $this->container['valid_domain'] = isset($data['valid_domain']) ? $data['valid_domain'] : null;
        $this->container['valid_endpoint'] = isset($data['valid_endpoint']) ? $data['valid_endpoint'] : null;
        $this->container['well_formed_url'] = isset($data['well_formed_url']) ? $data['well_formed_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets valid_url
     *
     * @return bool
     */
    public function getValidUrl()
    {
        return $this->container['valid_url'];
    }

    /**
     * Sets valid_url
     *
     * @param bool $valid_url True if the URL has valid syntax, a valid domain, a valid endpoint, and passes virus scan checks; false otherwise
     *
     * @return $this
     */
    public function setValidUrl($valid_url)
    {
        $this->container['valid_url'] = $valid_url;

        return $this;
    }

    /**
     * Gets valid_syntax
     *
     * @return bool
     */
    public function getValidSyntax()
    {
        return $this->container['valid_syntax'];
    }

    /**
     * Sets valid_syntax
     *
     * @param bool $valid_syntax True if the URL has valid syntax, false otherwise
     *
     * @return $this
     */
    public function setValidSyntax($valid_syntax)
    {
        $this->container['valid_syntax'] = $valid_syntax;

        return $this;
    }

    /**
     * Gets valid_domain
     *
     * @return bool
     */
    public function getValidDomain()
    {
        return $this->container['valid_domain'];
    }

    /**
     * Sets valid_domain
     *
     * @param bool $valid_domain True if the domain name is valid and exists, false otherwise
     *
     * @return $this
     */
    public function setValidDomain($valid_domain)
    {
        $this->container['valid_domain'] = $valid_domain;

        return $this;
    }

    /**
     * Gets valid_endpoint
     *
     * @return bool
     */
    public function getValidEndpoint()
    {
        return $this->container['valid_endpoint'];
    }

    /**
     * Sets valid_endpoint
     *
     * @param bool $valid_endpoint True if the endpoint is up and responsive and passes a virus scan check, false otherwise
     *
     * @return $this
     */
    public function setValidEndpoint($valid_endpoint)
    {
        $this->container['valid_endpoint'] = $valid_endpoint;

        return $this;
    }

    /**
     * Gets well_formed_url
     *
     * @return string
     */
    public function getWellFormedUrl()
    {
        return $this->container['well_formed_url'];
    }

    /**
     * Sets well_formed_url
     *
     * @param string $well_formed_url Well-formed version of the URL
     *
     * @return $this
     */
    public function setWellFormedUrl($well_formed_url)
    {
        $this->container['well_formed_url'] = $well_formed_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


