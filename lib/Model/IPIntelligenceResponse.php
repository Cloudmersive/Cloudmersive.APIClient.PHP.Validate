<?php
/**
 * IPIntelligenceResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IPIntelligenceResponse Class Doc Comment
 *
 * @category Class
 * @description IP address intelligence result
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IPIntelligenceResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IPIntelligenceResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_bot' => 'bool',
        'is_tor_node' => 'bool',
        'is_threat' => 'bool',
        'is_eu' => 'bool',
        'location' => '\Swagger\Client\Model\GeolocateResponse',
        'currency_code' => 'string',
        'currency_name' => 'string',
        'region_area' => 'string',
        'subregion_area' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_bot' => null,
        'is_tor_node' => null,
        'is_threat' => null,
        'is_eu' => null,
        'location' => null,
        'currency_code' => null,
        'currency_name' => null,
        'region_area' => null,
        'subregion_area' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_bot' => 'IsBot',
        'is_tor_node' => 'IsTorNode',
        'is_threat' => 'IsThreat',
        'is_eu' => 'IsEU',
        'location' => 'Location',
        'currency_code' => 'CurrencyCode',
        'currency_name' => 'CurrencyName',
        'region_area' => 'RegionArea',
        'subregion_area' => 'SubregionArea'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_bot' => 'setIsBot',
        'is_tor_node' => 'setIsTorNode',
        'is_threat' => 'setIsThreat',
        'is_eu' => 'setIsEu',
        'location' => 'setLocation',
        'currency_code' => 'setCurrencyCode',
        'currency_name' => 'setCurrencyName',
        'region_area' => 'setRegionArea',
        'subregion_area' => 'setSubregionArea'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_bot' => 'getIsBot',
        'is_tor_node' => 'getIsTorNode',
        'is_threat' => 'getIsThreat',
        'is_eu' => 'getIsEu',
        'location' => 'getLocation',
        'currency_code' => 'getCurrencyCode',
        'currency_name' => 'getCurrencyName',
        'region_area' => 'getRegionArea',
        'subregion_area' => 'getSubregionArea'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_bot'] = isset($data['is_bot']) ? $data['is_bot'] : null;
        $this->container['is_tor_node'] = isset($data['is_tor_node']) ? $data['is_tor_node'] : null;
        $this->container['is_threat'] = isset($data['is_threat']) ? $data['is_threat'] : null;
        $this->container['is_eu'] = isset($data['is_eu']) ? $data['is_eu'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['currency_name'] = isset($data['currency_name']) ? $data['currency_name'] : null;
        $this->container['region_area'] = isset($data['region_area']) ? $data['region_area'] : null;
        $this->container['subregion_area'] = isset($data['subregion_area']) ? $data['subregion_area'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets is_bot
     *
     * @return bool
     */
    public function getIsBot()
    {
        return $this->container['is_bot'];
    }

    /**
     * Sets is_bot
     *
     * @param bool $is_bot True if the IP address is a known bot, otherwise false
     *
     * @return $this
     */
    public function setIsBot($is_bot)
    {
        $this->container['is_bot'] = $is_bot;

        return $this;
    }

    /**
     * Gets is_tor_node
     *
     * @return bool
     */
    public function getIsTorNode()
    {
        return $this->container['is_tor_node'];
    }

    /**
     * Sets is_tor_node
     *
     * @param bool $is_tor_node True if the IP address is a known Tor exit node, otherwise false
     *
     * @return $this
     */
    public function setIsTorNode($is_tor_node)
    {
        $this->container['is_tor_node'] = $is_tor_node;

        return $this;
    }

    /**
     * Gets is_threat
     *
     * @return bool
     */
    public function getIsThreat()
    {
        return $this->container['is_threat'];
    }

    /**
     * Sets is_threat
     *
     * @param bool $is_threat True if the IP address is a known threat IP, otherwise false
     *
     * @return $this
     */
    public function setIsThreat($is_threat)
    {
        $this->container['is_threat'] = $is_threat;

        return $this;
    }

    /**
     * Gets is_eu
     *
     * @return bool
     */
    public function getIsEu()
    {
        return $this->container['is_eu'];
    }

    /**
     * Sets is_eu
     *
     * @param bool $is_eu True if the IP address is in the European Union, otherwise false
     *
     * @return $this
     */
    public function setIsEu($is_eu)
    {
        $this->container['is_eu'] = $is_eu;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\GeolocateResponse
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\GeolocateResponse $location Returns the location of the IP address
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code ISO 4217 currency code for the IP address location
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_name
     *
     * @return string
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     *
     * @param string $currency_name Name of the currency in English
     *
     * @return $this
     */
    public function setCurrencyName($currency_name)
    {
        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets region_area
     *
     * @return string
     */
    public function getRegionArea()
    {
        return $this->container['region_area'];
    }

    /**
     * Sets region_area
     *
     * @param string $region_area Region (continent) in which the country is located; possible values are None, Europe, Americas, Asia, Africa, Oceania
     *
     * @return $this
     */
    public function setRegionArea($region_area)
    {
        $this->container['region_area'] = $region_area;

        return $this;
    }

    /**
     * Gets subregion_area
     *
     * @return string
     */
    public function getSubregionArea()
    {
        return $this->container['subregion_area'];
    }

    /**
     * Sets subregion_area
     *
     * @param string $subregion_area Subregion in which the country is located; possible values are None, NorthernEurope, WesternEurope, SouthernEurope, EasternEurope, CentralAmerica, NorthernAmerica, SouthAmerica, EasternAfrica, MiddleAfrica, NorthernAfrica , SouthernAfrica , WesternAfrica , CentralAsia , EasternAsia , SouthernAsia , SouthEasternAsia , WesternAsia , Southern , Middle , AustraliaandNewZealand , Melanesia , Polynesia , Micronesia , Caribbean,
     *
     * @return $this
     */
    public function setSubregionArea($subregion_area)
    {
        $this->container['subregion_area'] = $subregion_area;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


