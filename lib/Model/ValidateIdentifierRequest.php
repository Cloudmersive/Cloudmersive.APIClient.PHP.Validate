<?php
/**
 * ValidateIdentifierRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ValidateIdentifierRequest Class Doc Comment
 *
 * @category Class
 * @description Identifier validation request, including the input identifier as well as various identifier rules
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValidateIdentifierRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ValidateIdentifierRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'input' => 'string',
        'allow_whitespace' => 'bool',
        'allow_hyphens' => 'bool',
        'allow_underscore' => 'bool',
        'allow_numbers' => 'bool',
        'allow_periods' => 'bool',
        'max_length' => 'int',
        'min_length' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'input' => null,
        'allow_whitespace' => null,
        'allow_hyphens' => null,
        'allow_underscore' => null,
        'allow_numbers' => null,
        'allow_periods' => null,
        'max_length' => 'int32',
        'min_length' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input' => 'Input',
        'allow_whitespace' => 'AllowWhitespace',
        'allow_hyphens' => 'AllowHyphens',
        'allow_underscore' => 'AllowUnderscore',
        'allow_numbers' => 'AllowNumbers',
        'allow_periods' => 'AllowPeriods',
        'max_length' => 'MaxLength',
        'min_length' => 'MinLength'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input' => 'setInput',
        'allow_whitespace' => 'setAllowWhitespace',
        'allow_hyphens' => 'setAllowHyphens',
        'allow_underscore' => 'setAllowUnderscore',
        'allow_numbers' => 'setAllowNumbers',
        'allow_periods' => 'setAllowPeriods',
        'max_length' => 'setMaxLength',
        'min_length' => 'setMinLength'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input' => 'getInput',
        'allow_whitespace' => 'getAllowWhitespace',
        'allow_hyphens' => 'getAllowHyphens',
        'allow_underscore' => 'getAllowUnderscore',
        'allow_numbers' => 'getAllowNumbers',
        'allow_periods' => 'getAllowPeriods',
        'max_length' => 'getMaxLength',
        'min_length' => 'getMinLength'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input'] = isset($data['input']) ? $data['input'] : null;
        $this->container['allow_whitespace'] = isset($data['allow_whitespace']) ? $data['allow_whitespace'] : null;
        $this->container['allow_hyphens'] = isset($data['allow_hyphens']) ? $data['allow_hyphens'] : null;
        $this->container['allow_underscore'] = isset($data['allow_underscore']) ? $data['allow_underscore'] : null;
        $this->container['allow_numbers'] = isset($data['allow_numbers']) ? $data['allow_numbers'] : null;
        $this->container['allow_periods'] = isset($data['allow_periods']) ? $data['allow_periods'] : null;
        $this->container['max_length'] = isset($data['max_length']) ? $data['max_length'] : null;
        $this->container['min_length'] = isset($data['min_length']) ? $data['min_length'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets input
     *
     * @return string
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param string $input Text string identifier input
     *
     * @return $this
     */
    public function setInput($input)
    {
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets allow_whitespace
     *
     * @return bool
     */
    public function getAllowWhitespace()
    {
        return $this->container['allow_whitespace'];
    }

    /**
     * Sets allow_whitespace
     *
     * @param bool $allow_whitespace True if whitespace is allowed in the identifier, false otherwise
     *
     * @return $this
     */
    public function setAllowWhitespace($allow_whitespace)
    {
        $this->container['allow_whitespace'] = $allow_whitespace;

        return $this;
    }

    /**
     * Gets allow_hyphens
     *
     * @return bool
     */
    public function getAllowHyphens()
    {
        return $this->container['allow_hyphens'];
    }

    /**
     * Sets allow_hyphens
     *
     * @param bool $allow_hyphens True if hyphens are allowd in the identifier, false otherwise
     *
     * @return $this
     */
    public function setAllowHyphens($allow_hyphens)
    {
        $this->container['allow_hyphens'] = $allow_hyphens;

        return $this;
    }

    /**
     * Gets allow_underscore
     *
     * @return bool
     */
    public function getAllowUnderscore()
    {
        return $this->container['allow_underscore'];
    }

    /**
     * Sets allow_underscore
     *
     * @param bool $allow_underscore True if underscores are allowed in the identifier, false otherwise
     *
     * @return $this
     */
    public function setAllowUnderscore($allow_underscore)
    {
        $this->container['allow_underscore'] = $allow_underscore;

        return $this;
    }

    /**
     * Gets allow_numbers
     *
     * @return bool
     */
    public function getAllowNumbers()
    {
        return $this->container['allow_numbers'];
    }

    /**
     * Sets allow_numbers
     *
     * @param bool $allow_numbers True if numbers are allowed in the identifier, false otherwise
     *
     * @return $this
     */
    public function setAllowNumbers($allow_numbers)
    {
        $this->container['allow_numbers'] = $allow_numbers;

        return $this;
    }

    /**
     * Gets allow_periods
     *
     * @return bool
     */
    public function getAllowPeriods()
    {
        return $this->container['allow_periods'];
    }

    /**
     * Sets allow_periods
     *
     * @param bool $allow_periods True if periods are allowed in the identifier, false otherwise
     *
     * @return $this
     */
    public function setAllowPeriods($allow_periods)
    {
        $this->container['allow_periods'] = $allow_periods;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return int
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     *
     * @param int $max_length Optional; maximum length, if any, of the identifier
     *
     * @return $this
     */
    public function setMaxLength($max_length)
    {
        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets min_length
     *
     * @return int
     */
    public function getMinLength()
    {
        return $this->container['min_length'];
    }

    /**
     * Sets min_length
     *
     * @param int $min_length Optional; minimum length, if any, of the identifier
     *
     * @return $this
     */
    public function setMinLength($min_length)
    {
        $this->container['min_length'] = $min_length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


