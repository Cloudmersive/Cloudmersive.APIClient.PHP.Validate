<?php
/**
 * XxeDetectionRequestItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * XxeDetectionRequestItem Class Doc Comment
 *
 * @category Class
 * @description Individual item to detect for XXE
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class XxeDetectionRequestItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'XxeDetectionRequestItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'input_text' => 'string',
        'allow_internet_urls' => 'bool',
        'known_safe_urls' => 'string[]',
        'known_unsafe_urls' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'input_text' => null,
        'allow_internet_urls' => null,
        'known_safe_urls' => null,
        'known_unsafe_urls' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input_text' => 'InputText',
        'allow_internet_urls' => 'AllowInternetUrls',
        'known_safe_urls' => 'KnownSafeUrls',
        'known_unsafe_urls' => 'KnownUnsafeUrls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input_text' => 'setInputText',
        'allow_internet_urls' => 'setAllowInternetUrls',
        'known_safe_urls' => 'setKnownSafeUrls',
        'known_unsafe_urls' => 'setKnownUnsafeUrls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input_text' => 'getInputText',
        'allow_internet_urls' => 'getAllowInternetUrls',
        'known_safe_urls' => 'getKnownSafeUrls',
        'known_unsafe_urls' => 'getKnownUnsafeUrls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input_text'] = isset($data['input_text']) ? $data['input_text'] : null;
        $this->container['allow_internet_urls'] = isset($data['allow_internet_urls']) ? $data['allow_internet_urls'] : null;
        $this->container['known_safe_urls'] = isset($data['known_safe_urls']) ? $data['known_safe_urls'] : null;
        $this->container['known_unsafe_urls'] = isset($data['known_unsafe_urls']) ? $data['known_unsafe_urls'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets input_text
     *
     * @return string
     */
    public function getInputText()
    {
        return $this->container['input_text'];
    }

    /**
     * Sets input_text
     *
     * @param string $input_text Individual input text item to protect from XXE
     *
     * @return $this
     */
    public function setInputText($input_text)
    {
        $this->container['input_text'] = $input_text;

        return $this;
    }

    /**
     * Gets allow_internet_urls
     *
     * @return bool
     */
    public function getAllowInternetUrls()
    {
        return $this->container['allow_internet_urls'];
    }

    /**
     * Sets allow_internet_urls
     *
     * @param bool $allow_internet_urls Optional: Set to true to allow Internet-based dependency URLs for DTDs and other XML External Entitites, set to false to block.  Default is false.
     *
     * @return $this
     */
    public function setAllowInternetUrls($allow_internet_urls)
    {
        $this->container['allow_internet_urls'] = $allow_internet_urls;

        return $this;
    }

    /**
     * Gets known_safe_urls
     *
     * @return string[]
     */
    public function getKnownSafeUrls()
    {
        return $this->container['known_safe_urls'];
    }

    /**
     * Sets known_safe_urls
     *
     * @param string[] $known_safe_urls Optional: Comma separated list of fully-qualified URLs that will automatically be considered safe.
     *
     * @return $this
     */
    public function setKnownSafeUrls($known_safe_urls)
    {
        $this->container['known_safe_urls'] = $known_safe_urls;

        return $this;
    }

    /**
     * Gets known_unsafe_urls
     *
     * @return string[]
     */
    public function getKnownUnsafeUrls()
    {
        return $this->container['known_unsafe_urls'];
    }

    /**
     * Sets known_unsafe_urls
     *
     * @param string[] $known_unsafe_urls Optional: Comma separated list of fully-qualified URLs that will automatically be considered unsafe.
     *
     * @return $this
     */
    public function setKnownUnsafeUrls($known_unsafe_urls)
    {
        $this->container['known_unsafe_urls'] = $known_unsafe_urls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


