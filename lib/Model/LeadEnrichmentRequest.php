<?php
/**
 * LeadEnrichmentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LeadEnrichmentRequest Class Doc Comment
 *
 * @category Class
 * @description Input lead contact; fill in known fields to extend them with matched field values
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadEnrichmentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LeadEnrichmentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contact_business_email' => 'string',
        'contact_first_name' => 'string',
        'contact_last_name' => 'string',
        'company_name' => 'string',
        'company_domain_name' => 'string',
        'company_house_number' => 'string',
        'company_street' => 'string',
        'company_city' => 'string',
        'company_state_or_province' => 'string',
        'company_postal_code' => 'string',
        'company_country' => 'string',
        'company_country_code' => 'string',
        'company_telephone' => 'string',
        'company_vat_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contact_business_email' => null,
        'contact_first_name' => null,
        'contact_last_name' => null,
        'company_name' => null,
        'company_domain_name' => null,
        'company_house_number' => null,
        'company_street' => null,
        'company_city' => null,
        'company_state_or_province' => null,
        'company_postal_code' => null,
        'company_country' => null,
        'company_country_code' => null,
        'company_telephone' => null,
        'company_vat_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_business_email' => 'ContactBusinessEmail',
        'contact_first_name' => 'ContactFirstName',
        'contact_last_name' => 'ContactLastName',
        'company_name' => 'CompanyName',
        'company_domain_name' => 'CompanyDomainName',
        'company_house_number' => 'CompanyHouseNumber',
        'company_street' => 'CompanyStreet',
        'company_city' => 'CompanyCity',
        'company_state_or_province' => 'CompanyStateOrProvince',
        'company_postal_code' => 'CompanyPostalCode',
        'company_country' => 'CompanyCountry',
        'company_country_code' => 'CompanyCountryCode',
        'company_telephone' => 'CompanyTelephone',
        'company_vat_number' => 'CompanyVATNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_business_email' => 'setContactBusinessEmail',
        'contact_first_name' => 'setContactFirstName',
        'contact_last_name' => 'setContactLastName',
        'company_name' => 'setCompanyName',
        'company_domain_name' => 'setCompanyDomainName',
        'company_house_number' => 'setCompanyHouseNumber',
        'company_street' => 'setCompanyStreet',
        'company_city' => 'setCompanyCity',
        'company_state_or_province' => 'setCompanyStateOrProvince',
        'company_postal_code' => 'setCompanyPostalCode',
        'company_country' => 'setCompanyCountry',
        'company_country_code' => 'setCompanyCountryCode',
        'company_telephone' => 'setCompanyTelephone',
        'company_vat_number' => 'setCompanyVatNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_business_email' => 'getContactBusinessEmail',
        'contact_first_name' => 'getContactFirstName',
        'contact_last_name' => 'getContactLastName',
        'company_name' => 'getCompanyName',
        'company_domain_name' => 'getCompanyDomainName',
        'company_house_number' => 'getCompanyHouseNumber',
        'company_street' => 'getCompanyStreet',
        'company_city' => 'getCompanyCity',
        'company_state_or_province' => 'getCompanyStateOrProvince',
        'company_postal_code' => 'getCompanyPostalCode',
        'company_country' => 'getCompanyCountry',
        'company_country_code' => 'getCompanyCountryCode',
        'company_telephone' => 'getCompanyTelephone',
        'company_vat_number' => 'getCompanyVatNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contact_business_email'] = isset($data['contact_business_email']) ? $data['contact_business_email'] : null;
        $this->container['contact_first_name'] = isset($data['contact_first_name']) ? $data['contact_first_name'] : null;
        $this->container['contact_last_name'] = isset($data['contact_last_name']) ? $data['contact_last_name'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_domain_name'] = isset($data['company_domain_name']) ? $data['company_domain_name'] : null;
        $this->container['company_house_number'] = isset($data['company_house_number']) ? $data['company_house_number'] : null;
        $this->container['company_street'] = isset($data['company_street']) ? $data['company_street'] : null;
        $this->container['company_city'] = isset($data['company_city']) ? $data['company_city'] : null;
        $this->container['company_state_or_province'] = isset($data['company_state_or_province']) ? $data['company_state_or_province'] : null;
        $this->container['company_postal_code'] = isset($data['company_postal_code']) ? $data['company_postal_code'] : null;
        $this->container['company_country'] = isset($data['company_country']) ? $data['company_country'] : null;
        $this->container['company_country_code'] = isset($data['company_country_code']) ? $data['company_country_code'] : null;
        $this->container['company_telephone'] = isset($data['company_telephone']) ? $data['company_telephone'] : null;
        $this->container['company_vat_number'] = isset($data['company_vat_number']) ? $data['company_vat_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets contact_business_email
     *
     * @return string
     */
    public function getContactBusinessEmail()
    {
        return $this->container['contact_business_email'];
    }

    /**
     * Sets contact_business_email
     *
     * @param string $contact_business_email The person's business email address for the lead
     *
     * @return $this
     */
    public function setContactBusinessEmail($contact_business_email)
    {
        $this->container['contact_business_email'] = $contact_business_email;

        return $this;
    }

    /**
     * Gets contact_first_name
     *
     * @return string
     */
    public function getContactFirstName()
    {
        return $this->container['contact_first_name'];
    }

    /**
     * Sets contact_first_name
     *
     * @param string $contact_first_name The person's first name for the lead
     *
     * @return $this
     */
    public function setContactFirstName($contact_first_name)
    {
        $this->container['contact_first_name'] = $contact_first_name;

        return $this;
    }

    /**
     * Gets contact_last_name
     *
     * @return string
     */
    public function getContactLastName()
    {
        return $this->container['contact_last_name'];
    }

    /**
     * Sets contact_last_name
     *
     * @param string $contact_last_name The person's last name for the lead
     *
     * @return $this
     */
    public function setContactLastName($contact_last_name)
    {
        $this->container['contact_last_name'] = $contact_last_name;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Name of the company for the lead
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_domain_name
     *
     * @return string
     */
    public function getCompanyDomainName()
    {
        return $this->container['company_domain_name'];
    }

    /**
     * Sets company_domain_name
     *
     * @param string $company_domain_name Domain name / website for the lead
     *
     * @return $this
     */
    public function setCompanyDomainName($company_domain_name)
    {
        $this->container['company_domain_name'] = $company_domain_name;

        return $this;
    }

    /**
     * Gets company_house_number
     *
     * @return string
     */
    public function getCompanyHouseNumber()
    {
        return $this->container['company_house_number'];
    }

    /**
     * Sets company_house_number
     *
     * @param string $company_house_number House number of the address of the company for the lead
     *
     * @return $this
     */
    public function setCompanyHouseNumber($company_house_number)
    {
        $this->container['company_house_number'] = $company_house_number;

        return $this;
    }

    /**
     * Gets company_street
     *
     * @return string
     */
    public function getCompanyStreet()
    {
        return $this->container['company_street'];
    }

    /**
     * Sets company_street
     *
     * @param string $company_street Street name of the address of the company for the lead
     *
     * @return $this
     */
    public function setCompanyStreet($company_street)
    {
        $this->container['company_street'] = $company_street;

        return $this;
    }

    /**
     * Gets company_city
     *
     * @return string
     */
    public function getCompanyCity()
    {
        return $this->container['company_city'];
    }

    /**
     * Sets company_city
     *
     * @param string $company_city City of the address of the company for the lead
     *
     * @return $this
     */
    public function setCompanyCity($company_city)
    {
        $this->container['company_city'] = $company_city;

        return $this;
    }

    /**
     * Gets company_state_or_province
     *
     * @return string
     */
    public function getCompanyStateOrProvince()
    {
        return $this->container['company_state_or_province'];
    }

    /**
     * Sets company_state_or_province
     *
     * @param string $company_state_or_province State or Province of the address of the company for the lead
     *
     * @return $this
     */
    public function setCompanyStateOrProvince($company_state_or_province)
    {
        $this->container['company_state_or_province'] = $company_state_or_province;

        return $this;
    }

    /**
     * Gets company_postal_code
     *
     * @return string
     */
    public function getCompanyPostalCode()
    {
        return $this->container['company_postal_code'];
    }

    /**
     * Sets company_postal_code
     *
     * @param string $company_postal_code Postal Code of the address of the company for the lead
     *
     * @return $this
     */
    public function setCompanyPostalCode($company_postal_code)
    {
        $this->container['company_postal_code'] = $company_postal_code;

        return $this;
    }

    /**
     * Gets company_country
     *
     * @return string
     */
    public function getCompanyCountry()
    {
        return $this->container['company_country'];
    }

    /**
     * Sets company_country
     *
     * @param string $company_country Country of the address of the company for the lead
     *
     * @return $this
     */
    public function setCompanyCountry($company_country)
    {
        $this->container['company_country'] = $company_country;

        return $this;
    }

    /**
     * Gets company_country_code
     *
     * @return string
     */
    public function getCompanyCountryCode()
    {
        return $this->container['company_country_code'];
    }

    /**
     * Sets company_country_code
     *
     * @param string $company_country_code Country Code (2-letter ISO 3166-1) of the address of the company for the lead
     *
     * @return $this
     */
    public function setCompanyCountryCode($company_country_code)
    {
        $this->container['company_country_code'] = $company_country_code;

        return $this;
    }

    /**
     * Gets company_telephone
     *
     * @return string
     */
    public function getCompanyTelephone()
    {
        return $this->container['company_telephone'];
    }

    /**
     * Sets company_telephone
     *
     * @param string $company_telephone Telephone of the company office for the lead
     *
     * @return $this
     */
    public function setCompanyTelephone($company_telephone)
    {
        $this->container['company_telephone'] = $company_telephone;

        return $this;
    }

    /**
     * Gets company_vat_number
     *
     * @return string
     */
    public function getCompanyVatNumber()
    {
        return $this->container['company_vat_number'];
    }

    /**
     * Sets company_vat_number
     *
     * @param string $company_vat_number VAT number of the company for the lead
     *
     * @return $this
     */
    public function setCompanyVatNumber($company_vat_number)
    {
        $this->container['company_vat_number'] = $company_vat_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


